// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package models

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
)

// const atualizaLista = `-- name: AtualizaLista :exec
// UPDATE listas.listas SET
//   lista = $1,
//   descricao = $2,
//   atualizado_em = NOW()
// WHERE 1 = 1
//   AND id = $3
//   AND usuario_id = $4
// `

type AtualizaListaParams struct {
	Lista     string      `json:"lista"`
	Descricao pgtype.Text `json:"descricao"`
	ListaID   int32       `json:"lista_id"`
	UsuarioID int32       `json:"usuario_id"`
}

// func (q *Queries) AtualizaLista(ctx context.Context, arg AtualizaListaParams) error {
// 	_, err := q.db.Exec(ctx, atualizaLista,
// 		arg.Lista,
// 		arg.Descricao,
// 		arg.ListaID,
// 		arg.UsuarioID,
// 	)
// 	return err
// }

// const deletaLista = `-- name: DeletaLista :exec
// DELETE FROM listas.listas
// WHERE 1 = 1
//   AND usuario_id = $1
//   AND id = $2
// `

type DeletaListaParams struct {
	UsuarioID int32 `json:"usuario_id"`
	ListaID   int32 `json:"lista_id"`
}

// func DeletaLista(ctx context.Context, arg DeletaListaParams) error {
// 	_, err := db.Exec(ctx, deletaLista, arg.UsuarioID, arg.ListaID)
// 	return err
// }

// const insereLista = `-- name: InsereLista :exec
// INSERT INTO listas.listas (
//   usuario_id,
//   lista,
//   descricao
// ) VALUES (
//   $1,
//   $2::text,
//   $3::text
// )
// `

type InsereListaParams struct {
	UsuarioID int32  `json:"usuario_id"`
	Lista     string `json:"lista"`
	Descricao string `json:"descricao"`
}

// func (q *Queries) InsereLista(ctx context.Context, arg InsereListaParams) error {
// 	_, err := q.db.Exec(ctx, insereLista, arg.UsuarioID, arg.Lista, arg.Descricao)
// 	return err
// }

// const listaUsuarios = `-- name: ListaUsuarios :many
// SELECT id, usuario FROM listas.usuarios
// ORDER BY usuario
// `

type ListaUsuariosRow struct {
	ID      int32  `json:"id"`
	Usuario string `json:"usuario"`
}

// func (q *Queries) ListaUsuarios(ctx context.Context) ([]ListaUsuariosRow, error) {
// 	rows, err := q.db.Query(ctx, listaUsuarios)
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer rows.Close()
// 	var items []ListaUsuariosRow
// 	for rows.Next() {
// 		var i ListaUsuariosRow
// 		if err := rows.Scan(&i.ID, &i.Usuario); err != nil {
// 			return nil, err
// 		}
// 		items = append(items, i)
// 	}
// 	if err := rows.Err(); err != nil {
// 		return nil, err
// 	}
// 	return items, nil
// }

// const pegaLista = `-- name: PegaLista :one
// SELECT id, lista, descricao FROM listas.listas
// WHERE id = $1
// `

type PegaListaRow struct {
	ID        int32       `json:"id"`
	Lista     string      `json:"lista"`
	Descricao pgtype.Text `json:"descricao"`
}

// func (q *Queries) PegaLista(ctx context.Context, listaID int32) (PegaListaRow, error) {
// 	row := q.db.QueryRow(ctx, pegaLista, listaID)
// 	var i PegaListaRow
// 	err := row.Scan(&i.ID, &i.Lista, &i.Descricao)
// 	return i, err
// }

// const pegaListas = `-- name: PegaListas :many
// SELECT id, lista, descricao FROM listas.listas
// WHERE usuario_id = $1
// ORDER BY criado_em DESC
// `

type PegaListasRow struct {
	ID        int32       `json:"id"`
	Lista     string      `json:"lista"`
	Descricao pgtype.Text `json:"descricao"`
}

// func (q *Queries) PegaListas(ctx context.Context, usuarioID int32) ([]PegaListasRow, error) {
// 	rows, err := q.db.Query(ctx, pegaListas, usuarioID)
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer rows.Close()
// 	var items []PegaListasRow
// 	for rows.Next() {
// 		var i PegaListasRow
// 		if err := rows.Scan(&i.ID, &i.Lista, &i.Descricao); err != nil {
// 			return nil, err
// 		}
// 		items = append(items, i)
// 	}
// 	if err := rows.Err(); err != nil {
// 		return nil, err
// 	}
// 	return items, nil
// }

// const pegaUsuariosCompartilhamento = `-- name: PegaUsuariosCompartilhamento :many
// SELECT 
//   cast(u.id as TEXT) as id, 
//   u.nome
// FROM listas.usuarios u
// WHERE u.id != $1
// ORDER BY u.nome
// `

type PegaUsuariosCompartilhamentoRow struct {
	ID   string      `json:"id"`
	Nome pgtype.Text `json:"nome"`
}

// func (q *Queries) PegaUsuariosCompartilhamento(ctx context.Context, usuarioID int32) ([]PegaUsuariosCompartilhamentoRow, error) {
// 	rows, err := q.db.Query(ctx, pegaUsuariosCompartilhamento, usuarioID)
// 	if err != nil {
// 		return nil, err
// 	}
// 	defer rows.Close()
// 	var items []PegaUsuariosCompartilhamentoRow
// 	for rows.Next() {
// 		var i PegaUsuariosCompartilhamentoRow
// 		if err := rows.Scan(&i.ID, &i.Nome); err != nil {
// 			return nil, err
// 		}
// 		items = append(items, i)
// 	}
// 	if err := rows.Err(); err != nil {
// 		return nil, err
// 	}
// 	return items, nil
// }

// const testaLogin = `-- name: TestaLogin :one
// SELECT id, usuario
// FROM listas.usuarios
// WHERE usuario = $1 AND senha = $2
// LIMIT 1
// `

type TestaLoginParams struct {
	Usuario string `json:"usuario"`
	Senha   string `json:"senha"`
}

type LoginRow struct {
	ID      int32  `json:"id"`
	Usuario string `json:"usuario"`
}

func (u *Usuario) TestaLogin(ctx context.Context) error {
	var usuario Usuario

	// err := db.GetContext(ctx, &usuario, sqlSelectTestaLogin, u.Usuario, u.Senha)
	err := db.GetContext(ctx, &usuario, sqlSelectTestaLogin, u.Usuario, u.Senha)
	if err != nil {
		if err == pgx.ErrNoRows {
			return err
		}
		return fmt.Errorf("erro ao buscar usuário: %w", err)
	}

	// Aqui você pode copiar os dados encontrados para o struct original, se quiser
	*u = usuario
    
    return nil
}

func (u *Usuario) PegaUsuariosParaCompartilhar(ctx context.Context) ([]Usuario, error) {
	var usuarios []Usuario

	err := db.SelectContext(ctx, &usuarios, sqlSelectUsuariosParaCompartilhar, u.ID)
	if err != nil {
		return nil, fmt.Errorf("erro ao buscar usuários para compartilhar: %w", err)
	}

	return usuarios, nil
}
